# Задание 2
# Написать программу сложения и умножения двух шестнадцатеричных чисел. При этом каждое число представляется как массив,
# элементы которого — цифры числа.
# Например, пользователь ввёл A2 и C4F. Нужно сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
# Сумма чисел из примера: [‘C’, ‘F’, ‘1’], произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

# Примечание: Если воспользоваться функциями hex() и/или int() для преобразования систем счисления, задача решается
# в несколько строк. Для прокачки алгоритмического мышления такой вариант не подходит. Поэтому использование встроенных
# функций для перевода из одной системы счисления в другую в данной задаче под запретом.
# Вспомните начальную школу и попробуйте написать сложение и умножение в столбик.

from collections import OrderedDict
from collections import Counter
from collections import deque

# Делаем два словаря для перевода шестнадцатиричных символов в числа и наоборот
hextonum ={}
numtohex ={}
for i,n in enumerate(list('0123456789ABCDEF')):
    hextonum[n] = i
    numtohex[i] = n
#print(hextonum,numtohex, sep='\n')
# вводим два шестнадцатиричных числа
hnum1 = input('Введите чиcло 1 в шестнадцатиричной системе (0-9,A,B,C,D,E,F): ')
hnum2 = input('Введите чиcло 2 в шестнадцатиричной системе (0-9,A,B,C,D,E,F): ')
# Делаем из них последовательности
hex1 = deque(hnum1)
hex2 = deque(hnum2)
# делаем последовательность чисел из шестнадацатиричных цифр
nn1 = deque(map(lambda v: hextonum[v], hex1))
nn2 = deque(map(lambda v: hextonum[v], hex2))
# Функция вычисления суммы двух шестнадцатиричных чисел представленных в виде виде последовательности из целых чисел
def sumlist(n1,n2):
    n1.reverse()
    n2.reverse()
    cd1 = Counter(OrderedDict(enumerate(n1)))
    cd2 = Counter(OrderedDict(enumerate(n2)))
    cd = (cd1 + cd2)
    od = OrderedDict(sorted(cd.items(),key=lambda x: x[0])) # в принципе работает и без перевода
    # в упорядоченный словарь, но теоретически Counter - неупорядоченная коллекция, поэтому правильнее перевести
    m = 0
    for i,v in od.items(): # в словаре приводим каждый элемент чтобы был не более 15, и если более то пувеличиваем следующий элемент
        if m>0:
            v += m
            m = 0
        if v > 15:
            m = v // 16
            v = v % 16
        od[i] = v
    if m > 0: # если остался остаток с последнего разряда - надо добавить еще один разряд
        od[len(od)] = m
    result = deque(od.values())
    result.reverse()
    n1.reverse()
    n2.reverse()
    pass
    return result

# Функция вычисления произведения двух шестнадцатиричных чисел представленных в виде виде последовательности из целых чисел
def multlist(nn1,nn2):
    result= deque()
    nn2.reverse()
    k = 0
    for i in nn2:
        spam = deque()
        for j in nn1: # для каждого числа из n2 умоножаем его на каждый элемент из n1, получаем таким образом псоледовательность для каждого числа из n2
            spam.append(j*i)
        m = k
        while m > 0:
            spam.append(0)
            m -= 1 # если это сдругой разряд этого элемента то добавляем 0
        result = sumlist(result,spam)  # суммируем теперь эти числа (как при умножении в столбик)
        k += 1
    nn2.reverse()
    pass
    return result

#Вычисляем сумму и произведение двух чисел
s1 = sumlist(nn1,nn2)
m1 = multlist(nn1,nn2)
# переводим их в шестнадцатиричные цифры
summ = list(map(lambda v: numtohex[v], s1))
multt = list(map(lambda v: numtohex[v], m1))
# Распечатаем числа в текстовом формате
print(f'\nСумма = {"".join(summ)}')
print(f'Произведение = {"".join(multt)}')
print('\n', '*'*100, '\n')


# Проверка вычислений:
h1 = (int(hnum1,16))
h2 = (int(hnum2,16))
print('ПРОВЕРКА')
print(f'Сумма (проверка) = {hex(h1+h2)}')
print(f'Произведение (проверка) = {hex(h1*h2)}')